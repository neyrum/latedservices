{"ast":null,"code":"import { createElementVNode as _createElementVNode, toDisplayString as _toDisplayString, openBlock as _openBlock, createElementBlock as _createElementBlock, createCommentVNode as _createCommentVNode, renderList as _renderList, Fragment as _Fragment, createTextVNode as _createTextVNode, normalizeClass as _normalizeClass } from \"vue\";\nconst _hoisted_1 = {\n  class: \"notifications\"\n};\nconst _hoisted_2 = {\n  key: 0,\n  class: \"badge\"\n};\nconst _hoisted_3 = {\n  key: 0,\n  class: \"notification-container\"\n};\nconst _hoisted_4 = [\"onClick\"];\nconst _hoisted_5 = {\n  key: 1,\n  class: \"empty-message\"\n};\nexport function render(_ctx, _cache, $props, $setup, $data, $options) {\n  return _openBlock(), _createElementBlock(\"div\", _hoisted_1, [_createElementVNode(\"button\", {\n    onClick: _cache[0] || (_cache[0] = (...args) => $options.toggleNotifications && $options.toggleNotifications(...args)),\n    class: \"notification-btn\"\n  }, [_cache[1] || (_cache[1] = _createElementVNode(\"i\", {\n    class: \"fas fa-bell\"\n  }, null, -1 /* HOISTED */)), $options.unreadCount > 0 ? (_openBlock(), _createElementBlock(\"span\", _hoisted_2, _toDisplayString($options.unreadCount), 1 /* TEXT */)) : _createCommentVNode(\"v-if\", true)]), $data.notificationsOpen ? (_openBlock(), _createElementBlock(\"div\", _hoisted_3, [$data.notifications.length > 0 ? (_openBlock(true), _createElementBlock(_Fragment, {\n    key: 0\n  }, _renderList($data.notifications, (notification, index) => {\n    return _openBlock(), _createElementBlock(\"div\", {\n      key: notification.id,\n      class: _normalizeClass([\"alert\", $options.alertClass(notification.type)]),\n      role: \"alert\"\n    }, [_createTextVNode(_toDisplayString(notification.message) + \" \", 1 /* TEXT */), _createElementVNode(\"button\", {\n      type: \"button\",\n      class: \"close\",\n      \"aria-label\": \"Close\",\n      onClick: $event => $options.deleteNotification(notification.id)\n    }, [...(_cache[2] || (_cache[2] = [_createElementVNode(\"span\", {\n      \"aria-hidden\": \"true\"\n    }, \"×\", -1 /* HOISTED */)]))], 8 /* PROPS */, _hoisted_4)], 2 /* CLASS */);\n  }), 128 /* KEYED_FRAGMENT */)) : (_openBlock(), _createElementBlock(\"div\", _hoisted_5, \" No hay notificaciones. \"))])) : _createCommentVNode(\"v-if\", true)]);\n}","map":{"version":3,"names":["class","key","_createElementBlock","_hoisted_1","_createElementVNode","onClick","_cache","args","$options","toggleNotifications","unreadCount","_hoisted_2","_toDisplayString","_createCommentVNode","$data","notificationsOpen","_hoisted_3","notifications","length","_Fragment","_renderList","notification","index","id","_normalizeClass","alertClass","type","role","_createTextVNode","message","$event","deleteNotification","_hoisted_4","_hoisted_5"],"sources":["/home/lated/LatedServices/frontend/src/components/UserNotifications.vue"],"sourcesContent":["<template>\n  <div class=\"notifications\">\n    <button @click=\"toggleNotifications\" class=\"notification-btn\">\n      <i class=\"fas fa-bell\"></i>\n      <span v-if=\"unreadCount > 0\" class=\"badge\">{{ unreadCount }}</span>\n    </button>\n    <div v-if=\"notificationsOpen\" class=\"notification-container\">\n      <template v-if=\"notifications.length > 0\">\n        <div \n          v-for=\"(notification, index) in notifications\" \n          :key=\"notification.id\" \n          class=\"alert\"\n          :class=\"alertClass(notification.type)\"\n          role=\"alert\"\n        >\n          {{ notification.message }}\n          <button \n            type=\"button\" \n            class=\"close\" \n            aria-label=\"Close\" \n            @click=\"deleteNotification(notification.id)\">\n            <span aria-hidden=\"true\">&times;</span>\n          </button>\n        </div>\n      </template>\n      <template v-else>\n        <div class=\"empty-message\">\n          No hay notificaciones.\n        </div>\n      </template>\n    </div>\n  </div>\n</template>\n\n<script>\nimport { io } from \"socket.io-client\";\nimport axios from \"@/plugins/axios\";\n\nexport default {\n  name: \"UserNotifications\",\n  data() {\n    return {\n      notificationsOpen: false,\n      notifications: [],\n      socket: null\n    };\n  },\n  computed: {\n    unreadCount() {\n      return this.notifications.filter(n => n.status === \"unread\").length;\n    }\n  },\n  async mounted() {\n    await this.fetchNotifications();\n    \n    // Inicializar conexión con Socket.io\n    this.socket = io(\"http://localhost:3000\");\n\n    // Escuchar nuevas notificaciones en tiempo real\n    this.socket.on(`notification-${this.getUserId()}`, (newNotification) => {\n      this.notifications.unshift(newNotification); // Agregar la nueva notificación a la lista\n    });\n\n    document.addEventListener(\"click\", this.handleClickOutside);\n    window.addEventListener(\"scroll\", this.handleScroll);\n    window.addEventListener(\"closeNotifications\", this.handleCloseNotifications);\n  },\n  beforeDestroy() {\n    if (this.socket) {\n      this.socket.disconnect();\n    }\n    document.removeEventListener(\"click\", this.handleClickOutside);\n    window.removeEventListener(\"scroll\", this.handleScroll);\n    window.removeEventListener(\"closeNotifications\", this.handleCloseNotifications);\n  },\n  methods: {\n    alertClass(type) {\n      return `alert-${type || \"info\"}`;\n    },\n    async toggleNotifications() {\n      this.notificationsOpen = !this.notificationsOpen;\n      if (this.notificationsOpen) {\n        await this.fetchNotifications();\n      }\n    },\n    async fetchNotifications() {\n      try {\n        const response = await axios.get(\"/notifications\");\n        this.notifications = response.data;\n      } catch (error) {\n        console.error(\"❌ Error obteniendo notificaciones:\", error);\n      }\n    },\n    async deleteNotification(notificationId) {\n      try {\n        await axios.delete(`/notifications/${notificationId}`);\n        this.notifications = this.notifications.filter(n => n.id !== notificationId);\n      } catch (error) {\n        console.error(\"❌ Error eliminando la notificación:\", error);\n      }\n    },\n    getUserId() {\n      // Extrae el userId de alguna fuente (ejemplo: store Vuex o localStorage)\n      return 1; // Ajusta esto para obtener el ID del usuario actual\n    },\n    handleClickOutside(event) {\n      if (!this.$el.contains(event.target)) {\n        this.notificationsOpen = false;\n      }\n    },\n    handleScroll() {\n      this.notificationsOpen = false;\n    },\n    handleCloseNotifications() {\n      this.notificationsOpen = false;\n    }\n  }\n};\n</script>\n\n<style scoped>\n.notifications {\n  position: relative;\n  display: flex;\n  align-items: center;\n  gap: 10px;\n}\n\n.notification-btn {\n  background: none;\n  border: none;\n  cursor: pointer;\n  font-size: 20px;\n  color: white;\n  position: relative;\n}\n\n.notification-btn i {\n  font-size: 20px;\n  color: white;\n}\n\n.badge {\n  background: red;\n  color: white;\n  border-radius: 50%;\n  padding: 5px;\n  font-size: 12px;\n  position: absolute;\n  top: -5px;\n  right: -10px;\n}\n\n.notification-container {\n  position: absolute;\n  top: 40px;\n  right: 0;\n  width: 220px;\n  background: white;\n  border: 1px solid #ccc;\n  padding: 8px;\n  border-radius: 8px;\n  box-shadow: 0 2px 5px rgba(0,0,0,0.2);\n}\n\n.alert {\n  padding: 6px 10px;\n  margin-bottom: 6px;\n  font-size: 0.9rem;\n  border-radius: 4px;\n  display: flex;\n  justify-content: space-between;\n  align-items: center;\n}\n\n.alert-success {\n  background-color: #d4edda;\n  color: #155724;\n}\n.alert-info {\n  background-color: #d1ecf1;\n  color: #0c5460;\n}\n\n.close {\n  background: none;\n  border: none;\n  font-size: 1rem;\n  cursor: pointer;\n  color: inherit;\n}\n\n.empty-message {\n  padding: 10px;\n  text-align: center;\n  color: #555;\n  font-size: 0.9rem;\n}\n</style>\n"],"mappings":";;EACOA,KAAK,EAAC;AAAe;;EAD5BC,GAAA;EAImCD,KAAK,EAAC;;;EAJzCC,GAAA;EAMkCD,KAAK,EAAC;;mBANxC;;EAAAC,GAAA;EA0BaD,KAAK,EAAC;;;uBAzBjBE,mBAAA,CA8BM,OA9BNC,UA8BM,GA7BJC,mBAAA,CAGS;IAHAC,OAAK,EAAAC,MAAA,QAAAA,MAAA,UAAAC,IAAA,KAAEC,QAAA,CAAAC,mBAAA,IAAAD,QAAA,CAAAC,mBAAA,IAAAF,IAAA,CAAmB;IAAEP,KAAK,EAAC;gCACzCI,mBAAA,CAA2B;IAAxBJ,KAAK,EAAC;EAAa,6BACVQ,QAAA,CAAAE,WAAW,Q,cAAvBR,mBAAA,CAAmE,QAAnES,UAAmE,EAAAC,gBAAA,CAArBJ,QAAA,CAAAE,WAAW,oBAJ/DG,mBAAA,e,GAMeC,KAAA,CAAAC,iBAAiB,I,cAA5Bb,mBAAA,CAwBM,OAxBNc,UAwBM,GAvBYF,KAAA,CAAAG,aAAa,CAACC,MAAM,Q,kBAClChB,mBAAA,CAeMiB,SAAA;IAvBdlB,GAAA;EAAA,GAAAmB,WAAA,CAS0CN,KAAA,CAAAG,aAAa,EATvD,CASkBI,YAAY,EAAEC,KAAK;yBAD7BpB,mBAAA,CAeM;MAbHD,GAAG,EAAEoB,YAAY,CAACE,EAAE;MACrBvB,KAAK,EAXfwB,eAAA,EAWgB,OAAO,EACLhB,QAAA,CAAAiB,UAAU,CAACJ,YAAY,CAACK,IAAI;MACpCC,IAAI,EAAC;QAbfC,gBAAA,CAAAhB,gBAAA,CAeaS,YAAY,CAACQ,OAAO,IAAG,GAC1B,iBAAAzB,mBAAA,CAMS;MALPsB,IAAI,EAAC,QAAQ;MACb1B,KAAK,EAAC,OAAO;MACb,YAAU,EAAC,OAAO;MACjBK,OAAK,EAAAyB,MAAA,IAAEtB,QAAA,CAAAuB,kBAAkB,CAACV,YAAY,CAACE,EAAE;uCAC1CnB,mBAAA,CAAuC;MAAjC,aAAW,EAAC;IAAM,GAAC,GAAO,oB,oBArB5C4B,UAAA,E;kDA0BQ9B,mBAAA,CAEM,OAFN+B,UAEM,EAFqB,0BAE3B,G,KA5BRpB,mBAAA,e","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}