{"ast":null,"code":"import api from \"../plugins/axios\";\nexport default {\n  namespaced: true,\n  // Habilitamos el espacio de nombres para este módulo\n  state: {\n    isAuthenticated: !!localStorage.getItem(\"token\"),\n    // Verifica si hay un token guardado\n    userData: null // Información del usuario autenticado\n  },\n  mutations: {\n    // Actualiza el estado de autenticación\n    setAuthenticated(state, status) {\n      state.isAuthenticated = status;\n    },\n    // Guarda los datos del usuario en el estado\n    setUserData(state, data) {\n      state.userData = data;\n    }\n  },\n  actions: {\n    // Acción para iniciar sesión\n    async login({\n      commit,\n      dispatch\n    }, credentials) {\n      try {\n        const response = await api.post(\"/auth/login\", credentials); // Endpoint para iniciar sesión\n        const token = response.data.token;\n\n        // Guardar el token en el almacenamiento local\n        localStorage.setItem(\"token\", token);\n\n        // Actualizar el estado de autenticación\n        commit(\"setAuthenticated\", true);\n\n        // Obtener los datos del usuario\n        await dispatch(\"fetchUserData\");\n      } catch (error) {\n        console.error(\"Error al iniciar sesión:\", error);\n        throw error.response?.data?.message || \"Error al iniciar sesión.\"; // Propagar el error con un mensaje claro\n      }\n    },\n    // Acción para obtener los datos del usuario autenticado\n    async fetchUserData({\n      commit\n    }) {\n      try {\n        const response = await api.get(\"/users/me\", {\n          headers: {\n            Authorization: `Bearer ${localStorage.getItem(\"token\")}`\n          }\n        });\n        commit(\"setUserData\", response.data); // Guardar los datos del usuario en el estado\n      } catch (error) {\n        if (error.response?.status === 401) {\n          // Si el token no es válido, limpiar el estado\n          commit(\"setAuthenticated\", false);\n          commit(\"setUserData\", null);\n          localStorage.removeItem(\"token\");\n        }\n        console.error(\"Error al obtener los datos del usuario:\", error);\n        throw error.response?.data?.message || \"Error al obtener los datos del usuario.\";\n      }\n    },\n    // Acción para cerrar sesión\n    logout({\n      commit\n    }) {\n      // Eliminar el token del almacenamiento local\n      localStorage.removeItem(\"token\");\n\n      // Limpiar el estado de autenticación y los datos del usuario\n      commit(\"setAuthenticated\", false);\n      commit(\"setUserData\", null);\n\n      // Redirigir al usuario al login usando Vue Router\n      window.location.href = \"/login\";\n    },\n    // Acción para validar el token al cargar la aplicación\n    async validateToken({\n      dispatch,\n      commit\n    }) {\n      const token = localStorage.getItem(\"token\");\n      if (!token) {\n        commit(\"setAuthenticated\", false);\n        commit(\"setUserData\", null);\n        return;\n      }\n      try {\n        await dispatch(\"fetchUserData\"); // Validar el token obteniendo los datos del usuario\n        commit(\"setAuthenticated\", true);\n      } catch (error) {\n        console.error(\"Error al validar el token:\", error);\n        commit(\"setAuthenticated\", false);\n        commit(\"setUserData\", null);\n        localStorage.removeItem(\"token\");\n      }\n    }\n  },\n  getters: {\n    // Verificar si el usuario está autenticado\n    isAuthenticated: state => state.isAuthenticated,\n    // Obtener los datos del usuario\n    userData: state => state.userData\n  }\n};","map":{"version":3,"names":["api","namespaced","state","isAuthenticated","localStorage","getItem","userData","mutations","setAuthenticated","status","setUserData","data","actions","login","commit","dispatch","credentials","response","post","token","setItem","error","console","message","fetchUserData","get","headers","Authorization","removeItem","logout","window","location","href","validateToken","getters"],"sources":["/Users/macbookpro/project/LatedServices/frontend/src/store/auth.js"],"sourcesContent":["import api from \"../plugins/axios\";\n\nexport default {\n  namespaced: true, // Habilitamos el espacio de nombres para este módulo\n  state: {\n    isAuthenticated: !!localStorage.getItem(\"token\"), // Verifica si hay un token guardado\n    userData: null, // Información del usuario autenticado\n  },\n  mutations: {\n    // Actualiza el estado de autenticación\n    setAuthenticated(state, status) {\n      state.isAuthenticated = status;\n    },\n    // Guarda los datos del usuario en el estado\n    setUserData(state, data) {\n      state.userData = data;\n    },\n  },\n  actions: {\n    // Acción para iniciar sesión\n    async login({ commit, dispatch }, credentials) {\n      try {\n        const response = await api.post(\"/auth/login\", credentials); // Endpoint para iniciar sesión\n        const token = response.data.token;\n\n        // Guardar el token en el almacenamiento local\n        localStorage.setItem(\"token\", token);\n\n        // Actualizar el estado de autenticación\n        commit(\"setAuthenticated\", true);\n\n        // Obtener los datos del usuario\n        await dispatch(\"fetchUserData\");\n      } catch (error) {\n        console.error(\"Error al iniciar sesión:\", error);\n        throw error.response?.data?.message || \"Error al iniciar sesión.\"; // Propagar el error con un mensaje claro\n      }\n    },\n\n    // Acción para obtener los datos del usuario autenticado\n    async fetchUserData({ commit }) {\n      try {\n        const response = await api.get(\"/users/me\", {\n          headers: { Authorization: `Bearer ${localStorage.getItem(\"token\")}` },\n        });\n        commit(\"setUserData\", response.data); // Guardar los datos del usuario en el estado\n      } catch (error) {\n        if (error.response?.status === 401) {\n          // Si el token no es válido, limpiar el estado\n          commit(\"setAuthenticated\", false);\n          commit(\"setUserData\", null);\n          localStorage.removeItem(\"token\");\n        }\n        console.error(\"Error al obtener los datos del usuario:\", error);\n        throw error.response?.data?.message || \"Error al obtener los datos del usuario.\";\n      }\n    },\n\n    // Acción para cerrar sesión\n    logout({ commit }) {\n      // Eliminar el token del almacenamiento local\n      localStorage.removeItem(\"token\");\n\n      // Limpiar el estado de autenticación y los datos del usuario\n      commit(\"setAuthenticated\", false);\n      commit(\"setUserData\", null);\n\n      // Redirigir al usuario al login usando Vue Router\n      window.location.href = \"/login\";\n    },\n\n    // Acción para validar el token al cargar la aplicación\n    async validateToken({ dispatch, commit }) {\n      const token = localStorage.getItem(\"token\");\n      if (!token) {\n        commit(\"setAuthenticated\", false);\n        commit(\"setUserData\", null);\n        return;\n      }\n    \n      try {\n        await dispatch(\"fetchUserData\"); // Validar el token obteniendo los datos del usuario\n        commit(\"setAuthenticated\", true);\n      } catch (error) {\n        console.error(\"Error al validar el token:\", error);\n        commit(\"setAuthenticated\", false);\n        commit(\"setUserData\", null);\n        localStorage.removeItem(\"token\");\n      }\n    },\n  },\n  getters: {\n    // Verificar si el usuario está autenticado\n    isAuthenticated: (state) => state.isAuthenticated,\n\n    // Obtener los datos del usuario\n    userData: (state) => state.userData,\n  },\n};"],"mappings":"AAAA,OAAOA,GAAG,MAAM,kBAAkB;AAElC,eAAe;EACbC,UAAU,EAAE,IAAI;EAAE;EAClBC,KAAK,EAAE;IACLC,eAAe,EAAE,CAAC,CAACC,YAAY,CAACC,OAAO,CAAC,OAAO,CAAC;IAAE;IAClDC,QAAQ,EAAE,IAAI,CAAE;EAClB,CAAC;EACDC,SAAS,EAAE;IACT;IACAC,gBAAgBA,CAACN,KAAK,EAAEO,MAAM,EAAE;MAC9BP,KAAK,CAACC,eAAe,GAAGM,MAAM;IAChC,CAAC;IACD;IACAC,WAAWA,CAACR,KAAK,EAAES,IAAI,EAAE;MACvBT,KAAK,CAACI,QAAQ,GAAGK,IAAI;IACvB;EACF,CAAC;EACDC,OAAO,EAAE;IACP;IACA,MAAMC,KAAKA,CAAC;MAAEC,MAAM;MAAEC;IAAS,CAAC,EAAEC,WAAW,EAAE;MAC7C,IAAI;QACF,MAAMC,QAAQ,GAAG,MAAMjB,GAAG,CAACkB,IAAI,CAAC,aAAa,EAAEF,WAAW,CAAC,CAAC,CAAC;QAC7D,MAAMG,KAAK,GAAGF,QAAQ,CAACN,IAAI,CAACQ,KAAK;;QAEjC;QACAf,YAAY,CAACgB,OAAO,CAAC,OAAO,EAAED,KAAK,CAAC;;QAEpC;QACAL,MAAM,CAAC,kBAAkB,EAAE,IAAI,CAAC;;QAEhC;QACA,MAAMC,QAAQ,CAAC,eAAe,CAAC;MACjC,CAAC,CAAC,OAAOM,KAAK,EAAE;QACdC,OAAO,CAACD,KAAK,CAAC,0BAA0B,EAAEA,KAAK,CAAC;QAChD,MAAMA,KAAK,CAACJ,QAAQ,EAAEN,IAAI,EAAEY,OAAO,IAAI,0BAA0B,CAAC,CAAC;MACrE;IACF,CAAC;IAED;IACA,MAAMC,aAAaA,CAAC;MAAEV;IAAO,CAAC,EAAE;MAC9B,IAAI;QACF,MAAMG,QAAQ,GAAG,MAAMjB,GAAG,CAACyB,GAAG,CAAC,WAAW,EAAE;UAC1CC,OAAO,EAAE;YAAEC,aAAa,EAAE,UAAUvB,YAAY,CAACC,OAAO,CAAC,OAAO,CAAC;UAAG;QACtE,CAAC,CAAC;QACFS,MAAM,CAAC,aAAa,EAAEG,QAAQ,CAACN,IAAI,CAAC,CAAC,CAAC;MACxC,CAAC,CAAC,OAAOU,KAAK,EAAE;QACd,IAAIA,KAAK,CAACJ,QAAQ,EAAER,MAAM,KAAK,GAAG,EAAE;UAClC;UACAK,MAAM,CAAC,kBAAkB,EAAE,KAAK,CAAC;UACjCA,MAAM,CAAC,aAAa,EAAE,IAAI,CAAC;UAC3BV,YAAY,CAACwB,UAAU,CAAC,OAAO,CAAC;QAClC;QACAN,OAAO,CAACD,KAAK,CAAC,yCAAyC,EAAEA,KAAK,CAAC;QAC/D,MAAMA,KAAK,CAACJ,QAAQ,EAAEN,IAAI,EAAEY,OAAO,IAAI,yCAAyC;MAClF;IACF,CAAC;IAED;IACAM,MAAMA,CAAC;MAAEf;IAAO,CAAC,EAAE;MACjB;MACAV,YAAY,CAACwB,UAAU,CAAC,OAAO,CAAC;;MAEhC;MACAd,MAAM,CAAC,kBAAkB,EAAE,KAAK,CAAC;MACjCA,MAAM,CAAC,aAAa,EAAE,IAAI,CAAC;;MAE3B;MACAgB,MAAM,CAACC,QAAQ,CAACC,IAAI,GAAG,QAAQ;IACjC,CAAC;IAED;IACA,MAAMC,aAAaA,CAAC;MAAElB,QAAQ;MAAED;IAAO,CAAC,EAAE;MACxC,MAAMK,KAAK,GAAGf,YAAY,CAACC,OAAO,CAAC,OAAO,CAAC;MAC3C,IAAI,CAACc,KAAK,EAAE;QACVL,MAAM,CAAC,kBAAkB,EAAE,KAAK,CAAC;QACjCA,MAAM,CAAC,aAAa,EAAE,IAAI,CAAC;QAC3B;MACF;MAEA,IAAI;QACF,MAAMC,QAAQ,CAAC,eAAe,CAAC,CAAC,CAAC;QACjCD,MAAM,CAAC,kBAAkB,EAAE,IAAI,CAAC;MAClC,CAAC,CAAC,OAAOO,KAAK,EAAE;QACdC,OAAO,CAACD,KAAK,CAAC,4BAA4B,EAAEA,KAAK,CAAC;QAClDP,MAAM,CAAC,kBAAkB,EAAE,KAAK,CAAC;QACjCA,MAAM,CAAC,aAAa,EAAE,IAAI,CAAC;QAC3BV,YAAY,CAACwB,UAAU,CAAC,OAAO,CAAC;MAClC;IACF;EACF,CAAC;EACDM,OAAO,EAAE;IACP;IACA/B,eAAe,EAAGD,KAAK,IAAKA,KAAK,CAACC,eAAe;IAEjD;IACAG,QAAQ,EAAGJ,KAAK,IAAKA,KAAK,CAACI;EAC7B;AACF,CAAC","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}