{"ast":null,"code":"import axios from \"@/plugins/axios\";\nimport DashboardCard from \"@/components/DashboardCard.vue\";\nimport DashboardChart from \"@/components/DashboardChart.vue\";\nimport DashboardLineChart from \"@/components/DashboardLineChart.vue\";\nimport RequestHistory from \"@/views/client/RequestHistory.vue\"; // se importa, pero no se usa aquí\nimport { mapState } from \"vuex\";\nexport default {\n  name: \"DashboardHome\",\n  components: {\n    DashboardCard,\n    DashboardChart,\n    DashboardLineChart,\n    RequestHistory\n  },\n  data() {\n    return {\n      summary: {\n        totalRequests: 0,\n        activeServices: 0,\n        pendingRequests: 0,\n        totalUsers: 0,\n        systemLogs: 0\n      },\n      userServicesCount: 0,\n      // Eliminamos el valor estático de userPendingCount; usaremos la propiedad computada.\n      errorMessage: \"\",\n      // Datos para gráficas:\n      requestsChartData: {\n        labels: [],\n        datasets: []\n      },\n      servicesChartData: {\n        labels: [],\n        datasets: []\n      },\n      totalUsersChartData: {\n        labels: [],\n        datasets: []\n      }\n    };\n  },\n  computed: {\n    userData() {\n      // Obtiene los datos del usuario desde Vuex\n      return this.$store.getters[\"auth/userData\"] || {};\n    },\n    userRole() {\n      return this.userData.role || \"\";\n    },\n    isSuperAdmin() {\n      return this.userRole === \"superadmin\";\n    },\n    isAdmin() {\n      return this.userRole === \"admin\";\n    },\n    isUser() {\n      return this.userRole === \"client\";\n    },\n    adminCards() {\n      return [{\n        title: \"Total de Solicitudes\",\n        value: this.summary.totalRequests || 0\n      }, {\n        title: \"Servicios Activos\",\n        value: this.summary.activeServices || 0\n      }, {\n        title: \"Solicitudes Pendientes\",\n        value: this.summary.pendingRequests || 0\n      }];\n    },\n    superAdminCards() {\n      return [{\n        title: \"Total de Usuarios\",\n        value: this.summary.totalUsers || 0\n      }, {\n        title: \"Total de Solicitudes\",\n        value: this.summary.totalRequests || 0\n      }, {\n        title: \"Servicios Activos\",\n        value: this.summary.activeServices || 0\n      }, {\n        title: \"Solicitudes Pendientes\",\n        value: this.summary.pendingRequests || 0\n      }, {\n        title: \"Registros del Sistema\",\n        value: this.summary.systemLogs || 0\n      }];\n    },\n    // Mapear el estado 'requests' del módulo Vuex 'requests'\n    ...mapState(\"requests\", {\n      requests: state => state.requests\n    }),\n    // Propiedad computada para contar las solicitudes pendientes filtrando por status \"pending\"\n    userPendingCountComputed() {\n      if (!this.requests) return 0;\n      return this.requests.filter(req => req.status === \"pending\").length;\n    }\n  },\n  created() {\n    this.fetchSummary();\n    this.fetchUserStats();\n    this.fetchActiveServices();\n    // Despacha la acción para obtener la información real de solicitudes del usuario\n    this.$store.dispatch(\"requests/fetchRequests\");\n  },\n  methods: {\n    async fetchSummary() {\n      try {\n        const response = await axios.get(\"/admin/summary\");\n        this.summary = response.data;\n\n        // Actualizar datos del gráfico de solicitudes\n        this.requestsChartData = {\n          labels: [\"Enero\", \"Febrero\", \"Marzo\", \"Abril\", \"Mayo\", \"Junio\", \"Julio\", \"Agosto\", \"Septiembre\", \"Octubre\", \"Noviembre\", \"Diciembre\"],\n          datasets: [{\n            label: \"Solicitudes Totales\",\n            backgroundColor: \"#345896\",\n            data: [this.summary.totalRequests, 25, 40, 35, 50]\n          }]\n        };\n\n        // Actualizar datos del gráfico de servicios\n        this.servicesChartData = {\n          labels: [\"Enero\", \"Febrero\", \"Marzo\", \"Abril\", \"Mayo\", \"Junio\", \"Julio\", \"Agosto\", \"Septiembre\", \"Octubre\", \"Noviembre\", \"Diciembre\"],\n          datasets: [{\n            label: \"Servicios Activos\",\n            backgroundColor: \"#28a745\",\n            data: [this.summary.activeServices, 20, 30, 35, 45]\n          }]\n        };\n\n        // Datos simulados para gráfico de evolución de usuarios (reemplaza según tu API)\n        this.totalUsersChartData = {\n          labels: [\"Enero\", \"Febrero\", \"Marzo\", \"Abril\", \"Mayo\", \"Junio\", \"Julio\", \"Agosto\", \"Septiembre\", \"Octubre\", \"Noviembre\", \"Diciembre\"],\n          datasets: [{\n            label: \"Total de Usuarios\",\n            borderColor: \"#FF6384\",\n            backgroundColor: \"rgba(255, 99, 132, 0.2)\",\n            data: [100, 150, 200, 250, 500, this.summary.totalUsers || 300],\n            fill: true\n          }]\n        };\n      } catch (error) {\n        this.errorMessage = error.response?.data?.message || \"Error al cargar datos de resumen.\";\n      }\n    },\n    async fetchUserStats() {\n      try {\n        // Para los servicios activos, se simula un valor o lo obtienes desde otra API\n        // this.userServicesCount = 3;\n        // Ya no se asigna userPendingCount de forma estática, pues se calcula con la propiedad computada.\n      } catch (error) {\n        console.error(\"Error al cargar datos del usuario\", error);\n      }\n    },\n    async fetchActiveServices() {\n      try {\n        const response = await axios.get(\"/services/active\", {\n          headers: {\n            Authorization: `Bearer ${this.$store.getters[\"auth/token\"]}`\n          }\n        });\n        // Se actualiza la propiedad 'userServicesCount' con la cantidad de servicios activos\n        this.userServicesCount = response.data.data.length;\n        console.log(\"Servicios activos obtenidos:\", response.data.data);\n      } catch (error) {\n        console.error(\"Error al obtener servicios activos:\", error);\n        this.errorMessage = error.response?.data?.message || \"Error al cargar servicios activos.\";\n      }\n    }\n  }\n};","map":{"version":3,"names":["axios","DashboardCard","DashboardChart","DashboardLineChart","RequestHistory","mapState","name","components","data","summary","totalRequests","activeServices","pendingRequests","totalUsers","systemLogs","userServicesCount","errorMessage","requestsChartData","labels","datasets","servicesChartData","totalUsersChartData","computed","userData","$store","getters","userRole","role","isSuperAdmin","isAdmin","isUser","adminCards","title","value","superAdminCards","requests","state","userPendingCountComputed","filter","req","status","length","created","fetchSummary","fetchUserStats","fetchActiveServices","dispatch","methods","response","get","label","backgroundColor","borderColor","fill","error","message","console","headers","Authorization","log"],"sources":["/home/lated/LatedServices/frontend/src/views/admin/DashboardHome.vue"],"sourcesContent":["<template>\n  <div class=\"dashboard-home\">\n    <!-- Vista para Super Administradores -->\n    <template v-if=\"isSuperAdmin\">\n      <h2 class=\"dashboard-title\">Super Admin Dashboard</h2>\n      <p class=\"dashboard-subtitle\">\n        Bienvenido, {{ userData.name }}. Aquí puedes administrar todo el sistema.\n      </p>\n      <div class=\"cards\">\n        <DashboardCard\n          v-for=\"card in superAdminCards\"\n          :key=\"card.title\"\n          :title=\"card.title\"\n          :value=\"card.value\"\n        />\n      </div>\n    </template>\n\n    <!-- Vista para Administradores -->\n    <template v-else-if=\"isAdmin\">\n      <h2 class=\"dashboard-title\">Admin Dashboard</h2>\n      <div class=\"cards\">\n        <DashboardCard\n          v-for=\"card in adminCards\"\n          :key=\"card.title\"\n          :title=\"card.title\"\n          :value=\"card.value\"\n        />\n      </div>\n    </template>\n\n    <!-- Vista para Usuarios Regulares -->\n    <template v-else-if=\"isUser\">\n      <h2 class=\"dashboard-title\">User Dashboard</h2>\n      <p class=\"dashboard-subtitle\">\n        Bienvenido, {{ userData.name }}. Aquí tienes tu información personalizada.\n      </p>\n      <div class=\"cards\">\n        <!-- Aquí se muestra la cantidad de servicios activos (simulada o real) -->\n        <DashboardCard title=\"Servicios Activos\" :value=\"userServicesCount || 0\" />\n        <!-- Se utiliza la propiedad computada para contar dinámicamente las solicitudes pendientes -->\n        <DashboardCard title=\"Solicitudes Pendientes\" :value=\"userPendingCountComputed\" />\n      </div>\n    </template>\n\n    <!-- Vista genérica para roles sin contenido específico -->\n    <template v-else>\n      <h2 class=\"dashboard-title\">Dashboard</h2>\n      <p class=\"dashboard-subtitle\">\n        Tu rol no tiene contenido específico.\n      </p>\n    </template>\n\n    <!-- Sección de gráficos de los datos existentes (para Admin/SuperAdmin) -->\n    <div\n      class=\"stats-container\"\n      v-if=\"(isSuperAdmin || isAdmin) && requestsChartData.labels.length\"\n    >\n      <DashboardChart title=\"Solicitudes Totales\" :chartData=\"requestsChartData\" />\n      <DashboardChart title=\"Servicios Activos\" :chartData=\"servicesChartData\" />\n    </div>\n\n    <!-- Sección de gráfico para la evolución del total de usuarios (para Admin/SuperAdmin) -->\n    <div\n      class=\"stats-container\"\n      v-if=\"(isSuperAdmin || isAdmin) && totalUsersChartData.labels.length\"\n    >\n      <DashboardLineChart title=\"Evolución Total de Usuarios\" :chartData=\"totalUsersChartData\" />\n    </div>\n\n    <div v-if=\"errorMessage\" class=\"error\">{{ errorMessage }}</div>\n  </div>\n</template>\n\n<script>\nimport axios from \"@/plugins/axios\";\nimport DashboardCard from \"@/components/DashboardCard.vue\";\nimport DashboardChart from \"@/components/DashboardChart.vue\";\nimport DashboardLineChart from \"@/components/DashboardLineChart.vue\";\nimport RequestHistory from \"@/views/client/RequestHistory.vue\"; // se importa, pero no se usa aquí\nimport { mapState } from \"vuex\";\n\nexport default {\n  name: \"DashboardHome\",\n  components: { DashboardCard, DashboardChart, DashboardLineChart, RequestHistory },\n  data() {\n    return {\n      summary: {\n        totalRequests: 0,\n        activeServices: 0,\n        pendingRequests: 0,\n        totalUsers: 0,\n        systemLogs: 0,\n      },\n      userServicesCount: 0,\n      // Eliminamos el valor estático de userPendingCount; usaremos la propiedad computada.\n      errorMessage: \"\",\n      // Datos para gráficas:\n      requestsChartData: {\n        labels: [],\n        datasets: [],\n      },\n      servicesChartData: {\n        labels: [],\n        datasets: [],\n      },\n      totalUsersChartData: {\n        labels: [],\n        datasets: [],\n      },\n    };\n  },\n  computed: {\n    userData() {\n      // Obtiene los datos del usuario desde Vuex\n      return this.$store.getters[\"auth/userData\"] || {};\n    },\n    userRole() {\n      return this.userData.role || \"\";\n    },\n    isSuperAdmin() {\n      return this.userRole === \"superadmin\";\n    },\n    isAdmin() {\n      return this.userRole === \"admin\";\n    },\n    isUser() {\n      return this.userRole === \"client\";\n    },\n    adminCards() {\n      return [\n        { title: \"Total de Solicitudes\", value: this.summary.totalRequests || 0 },\n        { title: \"Servicios Activos\", value: this.summary.activeServices || 0 },\n        { title: \"Solicitudes Pendientes\", value: this.summary.pendingRequests || 0 },\n      ];\n    },\n    superAdminCards() {\n      return [\n        { title: \"Total de Usuarios\", value: this.summary.totalUsers || 0 },\n        { title: \"Total de Solicitudes\", value: this.summary.totalRequests || 0 },\n        { title: \"Servicios Activos\", value: this.summary.activeServices || 0 },\n        { title: \"Solicitudes Pendientes\", value: this.summary.pendingRequests || 0 },\n        { title: \"Registros del Sistema\", value: this.summary.systemLogs || 0 },\n      ];\n    },\n    // Mapear el estado 'requests' del módulo Vuex 'requests'\n    ...mapState(\"requests\", {\n      requests: (state) => state.requests,\n    }),\n    // Propiedad computada para contar las solicitudes pendientes filtrando por status \"pending\"\n    userPendingCountComputed() {\n      if (!this.requests) return 0;\n      return this.requests.filter(req => req.status === \"pending\").length;\n    },\n  },\n  created() {\n    this.fetchSummary();\n    this.fetchUserStats();\n    this.fetchActiveServices();\n    // Despacha la acción para obtener la información real de solicitudes del usuario\n    this.$store.dispatch(\"requests/fetchRequests\");\n  },\n  methods: {\n    async fetchSummary() {\n      try {\n        const response = await axios.get(\"/admin/summary\");\n        this.summary = response.data;\n\n        // Actualizar datos del gráfico de solicitudes\n        this.requestsChartData = {\n          labels: [\n            \"Enero\", \"Febrero\", \"Marzo\", \"Abril\", \"Mayo\",\n            \"Junio\", \"Julio\", \"Agosto\", \"Septiembre\", \"Octubre\", \"Noviembre\", \"Diciembre\"\n          ],\n          datasets: [\n            {\n              label: \"Solicitudes Totales\",\n              backgroundColor: \"#345896\",\n              data: [\n                this.summary.totalRequests,\n                25,\n                40,\n                35,\n                50,\n              ],\n            },\n          ],\n        };\n\n        // Actualizar datos del gráfico de servicios\n        this.servicesChartData = {\n          labels: [\n            \"Enero\", \"Febrero\", \"Marzo\", \"Abril\", \"Mayo\",\n            \"Junio\", \"Julio\", \"Agosto\", \"Septiembre\", \"Octubre\", \"Noviembre\", \"Diciembre\"\n          ],\n          datasets: [\n            {\n              label: \"Servicios Activos\",\n              backgroundColor: \"#28a745\",\n              data: [\n                this.summary.activeServices,\n                20,\n                30,\n                35,\n                45,\n              ],\n            },\n          ],\n        };\n\n        // Datos simulados para gráfico de evolución de usuarios (reemplaza según tu API)\n        this.totalUsersChartData = {\n          labels: [\n            \"Enero\", \"Febrero\", \"Marzo\", \"Abril\", \"Mayo\",\n            \"Junio\", \"Julio\", \"Agosto\", \"Septiembre\", \"Octubre\", \"Noviembre\", \"Diciembre\"\n          ],\n          datasets: [\n            {\n              label: \"Total de Usuarios\",\n              borderColor: \"#FF6384\",\n              backgroundColor: \"rgba(255, 99, 132, 0.2)\",\n              data: [100, 150, 200, 250, 500, this.summary.totalUsers || 300],\n              fill: true,\n            },\n          ],\n        };\n      } catch (error) {\n        this.errorMessage =\n          error.response?.data?.message || \"Error al cargar datos de resumen.\";\n      }\n    },\n    async fetchUserStats() {\n      try {\n        // Para los servicios activos, se simula un valor o lo obtienes desde otra API\n        // this.userServicesCount = 3;\n        // Ya no se asigna userPendingCount de forma estática, pues se calcula con la propiedad computada.\n      } catch (error) {\n        console.error(\"Error al cargar datos del usuario\", error);\n      }\n    },\n    async fetchActiveServices() {\n    try {\n      const response = await axios.get(\"/services/active\", {\n        headers: {\n          Authorization: `Bearer ${this.$store.getters[\"auth/token\"]}`,\n        },\n      });\n      // Se actualiza la propiedad 'userServicesCount' con la cantidad de servicios activos\n      this.userServicesCount = response.data.data.length;\n      console.log(\"Servicios activos obtenidos:\", response.data.data);\n    } catch (error) {\n      console.error(\"Error al obtener servicios activos:\", error);\n      this.errorMessage =\n        error.response?.data?.message || \"Error al cargar servicios activos.\";\n    }\n    },\n  },\n};\n</script>\n\n<style scoped>\n.dashboard-home {\n  padding: 20px;\n  text-align: center;\n}\n\n.dashboard-title {\n  font-size: 26px;\n  font-weight: bold;\n  color: #345896;\n  margin-bottom: 20px;\n  text-transform: uppercase;\n}\n\n.dashboard-subtitle {\n  font-size: 16px;\n  color: #555;\n  margin-bottom: 20px;\n}\n\n.cards {\n  display: flex;\n  flex-wrap: wrap;\n  gap: 20px;\n  justify-content: center;\n}\n\n.stats-container {\n  display: flex;\n  flex-wrap: wrap;\n  gap: 20px;\n  justify-content: center;\n  margin-top: 20px;\n}\n\n.error {\n  margin-top: 20px;\n  color: #d9534f;\n  font-size: 14px;\n}\n</style>\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}