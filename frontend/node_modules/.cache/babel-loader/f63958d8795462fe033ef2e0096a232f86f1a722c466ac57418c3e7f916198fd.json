{"ast":null,"code":"import axios from '@/plugins/axios'; // Asegúrate de tener Axios configurado en tu proyecto\n\nexport default {\n  data() {\n    return {\n      services: [],\n      newService: {\n        name: '',\n        description: ''\n      }\n    };\n  },\n  async created() {\n    await this.fetchServices();\n  },\n  methods: {\n    async fetchServices() {\n      try {\n        const response = await axios.get('/services'); // Llama a la API del backend\n        this.services = response.data;\n      } catch (error) {\n        console.error(\"Error al obtener servicios:\", error);\n      }\n    },\n    async createService() {\n      try {\n        await axios.post('/services', this.newService); // Envia datos al backend\n        this.newService = {\n          name: '',\n          description: ''\n        }; // Limpia el formulario\n        await this.fetchServices(); // Actualiza la lista\n      } catch (error) {\n        console.error(\"Error al crear servicio:\", error);\n      }\n    },\n    async deleteService(serviceId) {\n      if (confirm(\"¿Estás seguro de que quieres eliminar este servicio?\")) {\n        try {\n          await axios.delete(`/services/${serviceId}`); // Elimina servicio en el backend\n          await this.fetchServices(); // Refresca lista tras eliminar\n        } catch (error) {\n          console.error(\"Error al eliminar servicio:\", error);\n        }\n      }\n    }\n  }\n};","map":{"version":3,"names":["axios","data","services","newService","name","description","created","fetchServices","methods","response","get","error","console","createService","post","deleteService","serviceId","confirm","delete"],"sources":["/Users/macbookpro/project/LatedServices/frontend/src/views/admin/ManageServices.vue"],"sourcesContent":["<template>\n    <div class=\"dashboard\">\n      <h2>Gestión de Servicios</h2>\n  \n      <!-- Formulario para añadir servicios -->\n      <form @submit.prevent=\"createService\">\n        <input v-model=\"newService.name\" type=\"text\" placeholder=\"Nombre del servicio\" required />\n        <input v-model=\"newService.description\" type=\"text\" placeholder=\"Descripción\" required />\n        <button type=\"submit\" class=\"btn btn-primary\">Agregar Servicio</button>\n      </form>\n  \n      <!-- Listado de Servicios Existentes -->\n      <div class=\"service-list\">\n        <div class=\"card\" v-for=\"service in services\" :key=\"service.id\">\n          <div class=\"card-body\">\n            <h5 class=\"card-title\">{{ service.name }}</h5>\n            <p class=\"card-text\">{{ service.description }}</p>\n            <button @click=\"deleteService(service.id)\" class=\"btn btn-danger\">Eliminar</button>\n          </div>\n        </div>\n      </div>\n    </div>\n  </template>\n  \n  <script>\n  import axios from '@/plugins/axios'; // Asegúrate de tener Axios configurado en tu proyecto\n  \n  export default {\n    data() {\n      return {\n        services: [],\n        newService: { name: '', description: '' }\n      };\n    },\n    async created() {\n      await this.fetchServices();\n    },\n    methods: {\n      async fetchServices() {\n        try {\n          const response = await axios.get('/services'); // Llama a la API del backend\n          this.services = response.data;\n        } catch (error) {\n          console.error(\"Error al obtener servicios:\", error);\n        }\n      },\n      async createService() {\n        try {\n          await axios.post('/services', this.newService); // Envia datos al backend\n          this.newService = { name: '', description: '' }; // Limpia el formulario\n          await this.fetchServices(); // Actualiza la lista\n        } catch (error) {\n          console.error(\"Error al crear servicio:\", error);\n        }\n      },\n      async deleteService(serviceId) {\n        if (confirm(\"¿Estás seguro de que quieres eliminar este servicio?\")) {\n          try {\n            await axios.delete(`/services/${serviceId}`); // Elimina servicio en el backend\n            await this.fetchServices(); // Refresca lista tras eliminar\n          } catch (error) {\n            console.error(\"Error al eliminar servicio:\", error);\n          }\n        }\n      }\n    }\n  };\n  </script>\n  \n  <style scoped>\n  .dashboard {\n    padding: 20px;\n  }\n  .service-list {\n    display: flex;\n    flex-wrap: wrap;\n    gap: 10px;\n  }\n  .card {\n    border-radius: 5px;\n    padding: 15px;\n    width: 250px;\n  }\n  form {\n    display: flex;\n    flex-direction: column;\n    gap: 10px;\n    margin-bottom: 20px;\n  }\n  </style>\n  "],"mappings":"AAyBE,OAAOA,KAAI,MAAO,iBAAiB,EAAE;;AAErC,eAAe;EACbC,IAAIA,CAAA,EAAG;IACL,OAAO;MACLC,QAAQ,EAAE,EAAE;MACZC,UAAU,EAAE;QAAEC,IAAI,EAAE,EAAE;QAAEC,WAAW,EAAE;MAAG;IAC1C,CAAC;EACH,CAAC;EACD,MAAMC,OAAOA,CAAA,EAAG;IACd,MAAM,IAAI,CAACC,aAAa,CAAC,CAAC;EAC5B,CAAC;EACDC,OAAO,EAAE;IACP,MAAMD,aAAaA,CAAA,EAAG;MACpB,IAAI;QACF,MAAME,QAAO,GAAI,MAAMT,KAAK,CAACU,GAAG,CAAC,WAAW,CAAC,EAAE;QAC/C,IAAI,CAACR,QAAO,GAAIO,QAAQ,CAACR,IAAI;MAC/B,EAAE,OAAOU,KAAK,EAAE;QACdC,OAAO,CAACD,KAAK,CAAC,6BAA6B,EAAEA,KAAK,CAAC;MACrD;IACF,CAAC;IACD,MAAME,aAAaA,CAAA,EAAG;MACpB,IAAI;QACF,MAAMb,KAAK,CAACc,IAAI,CAAC,WAAW,EAAE,IAAI,CAACX,UAAU,CAAC,EAAE;QAChD,IAAI,CAACA,UAAS,GAAI;UAAEC,IAAI,EAAE,EAAE;UAAEC,WAAW,EAAE;QAAG,CAAC,EAAE;QACjD,MAAM,IAAI,CAACE,aAAa,CAAC,CAAC,EAAE;MAC9B,EAAE,OAAOI,KAAK,EAAE;QACdC,OAAO,CAACD,KAAK,CAAC,0BAA0B,EAAEA,KAAK,CAAC;MAClD;IACF,CAAC;IACD,MAAMI,aAAaA,CAACC,SAAS,EAAE;MAC7B,IAAIC,OAAO,CAAC,sDAAsD,CAAC,EAAE;QACnE,IAAI;UACF,MAAMjB,KAAK,CAACkB,MAAM,CAAC,aAAaF,SAAS,EAAE,CAAC,EAAE;UAC9C,MAAM,IAAI,CAACT,aAAa,CAAC,CAAC,EAAE;QAC9B,EAAE,OAAOI,KAAK,EAAE;UACdC,OAAO,CAACD,KAAK,CAAC,6BAA6B,EAAEA,KAAK,CAAC;QACrD;MACF;IACF;EACF;AACF,CAAC","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}