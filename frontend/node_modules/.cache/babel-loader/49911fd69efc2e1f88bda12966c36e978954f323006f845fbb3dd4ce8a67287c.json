{"ast":null,"code":"import { createRouter, createWebHistory } from \"vue-router\";\nimport store from \"@/store\";\nimport Home from \"@/views/Home.vue\";\nimport Login from \"@/views/auth/Login.vue\";\nimport Register from \"@/views/auth/Register.vue\";\nimport Dashboard from \"@/views/admin/Dashboard.vue\";\nimport AvailableServices from \"@/views/client/AvailableServices.vue\";\nimport Profile from \"@/views/client/Profile.vue\";\nimport RequestService from \"@/views/client/RequestService.vue\";\nconst routes = [{\n  path: \"/\",\n  name: \"Home\",\n  component: Home\n}, {\n  path: \"/login\",\n  name: \"Login\",\n  component: Login\n}, {\n  path: \"/register\",\n  name: \"Register\",\n  component: Register\n}, {\n  path: \"/dashboard\",\n  name: \"Dashboard\",\n  component: Dashboard,\n  meta: {\n    requiresAuth: true,\n    role: [\"admin\", \"superadmin\"]\n  }\n}, {\n  path: \"/client/services\",\n  name: \"AvailableServices\",\n  component: AvailableServices,\n  meta: {\n    requiresAuth: true,\n    role: [\"admin\", \"superadmin\", \"client\"]\n  }\n}, {\n  path: \"/profile\",\n  name: \"Profile\",\n  component: Profile,\n  meta: {\n    requiresAuth: true\n  }\n}, {\n  path: \"/request-service\",\n  name: \"RequestService\",\n  component: RequestService,\n  meta: {\n    requiresAuth: true,\n    role: [\"admin\", \"superadmin\", \"client\"]\n  }\n}, {\n  path: \"/:pathMatch(.*)*\",\n  name: \"NotFound\",\n  redirect: \"/\"\n}];\nconst router = createRouter({\n  history: createWebHistory(),\n  routes\n});\n\n// Middleware de protección de rutas\nrouter.beforeEach(async (to, from, next) => {\n  const isAuthenticated = store.getters[\"auth/isAuthenticated\"];\n  let userRole = store.getters[\"auth/userData\"]?.role;\n\n  // Si la ruta requiere autenticación y el usuario no está autenticado\n  if (to.meta.requiresAuth && !isAuthenticated) {\n    try {\n      // Intentar validar el token\n      await store.dispatch(\"auth/validateToken\");\n      const updatedIsAuthenticated = store.getters[\"auth/isAuthenticated\"];\n      if (!updatedIsAuthenticated) {\n        return next(\"/login\");\n      }\n      // Actualizar el rol del usuario después de validar el token\n      userRole = store.getters[\"auth/userData\"]?.role;\n    } catch {\n      return next(\"/login\");\n    }\n  }\n\n  // Si la ruta requiere un rol específico y el usuario no tiene un rol permitido\n  if (to.meta.role && !to.meta.role.includes(userRole)) {\n    return next(\"/\"); // Redirigir a la página de inicio si el rol no coincide\n  }\n  next(); // Permitir el acceso si no hay restricciones\n});\nexport default router;","map":{"version":3,"names":["createRouter","createWebHistory","store","Home","Login","Register","Dashboard","AvailableServices","Profile","RequestService","routes","path","name","component","meta","requiresAuth","role","redirect","router","history","beforeEach","to","from","next","isAuthenticated","getters","userRole","dispatch","updatedIsAuthenticated","includes"],"sources":["/home/lated/LatedServices/frontend/src/router/index.js"],"sourcesContent":["import { createRouter, createWebHistory } from \"vue-router\";\r\nimport store from \"@/store\";\r\nimport Home from \"@/views/Home.vue\";\r\nimport Login from \"@/views/auth/Login.vue\";\r\nimport Register from \"@/views/auth/Register.vue\";\r\nimport Dashboard from \"@/views/admin/Dashboard.vue\";\r\nimport AvailableServices from \"@/views/client/AvailableServices.vue\";\r\nimport Profile from \"@/views/client/Profile.vue\";\r\nimport RequestService from \"@/views/client/RequestService.vue\";\r\n\r\nconst routes = [\r\n  { path: \"/\", name: \"Home\", component: Home },\r\n  { path: \"/login\", name: \"Login\", component: Login },\r\n  { path: \"/register\", name: \"Register\", component: Register },\r\n  {\r\n    path: \"/dashboard\",\r\n    name: \"Dashboard\",\r\n    component: Dashboard,\r\n    meta: { requiresAuth: true, role: [\"admin\", \"superadmin\"] },\r\n  },\r\n  {\r\n    path: \"/client/services\",\r\n    name: \"AvailableServices\",\r\n    component: AvailableServices,\r\n    meta: { requiresAuth: true, role: [\"admin\", \"superadmin\", \"client\"] },\r\n  },\r\n  {\r\n    path: \"/profile\",\r\n    name: \"Profile\",\r\n    component: Profile,\r\n    meta: { requiresAuth: true },\r\n  },\r\n  {\r\n    path: \"/request-service\",\r\n    name: \"RequestService\",\r\n    component: RequestService,\r\n    meta: { requiresAuth: true, role: [\"admin\", \"superadmin\", \"client\"] },\r\n  },\r\n  { path: \"/:pathMatch(.*)*\", name: \"NotFound\", redirect: \"/\" },\r\n];\r\n\r\nconst router = createRouter({\r\n  history: createWebHistory(),\r\n  routes,\r\n});\r\n\r\n// Middleware de protección de rutas\r\nrouter.beforeEach(async (to, from, next) => {\r\n  const isAuthenticated = store.getters[\"auth/isAuthenticated\"];\r\n  let userRole = store.getters[\"auth/userData\"]?.role;\r\n\r\n  // Si la ruta requiere autenticación y el usuario no está autenticado\r\n  if (to.meta.requiresAuth && !isAuthenticated) {\r\n    try {\r\n      // Intentar validar el token\r\n      await store.dispatch(\"auth/validateToken\");\r\n      const updatedIsAuthenticated = store.getters[\"auth/isAuthenticated\"];\r\n      if (!updatedIsAuthenticated) {\r\n        return next(\"/login\");\r\n      }\r\n      // Actualizar el rol del usuario después de validar el token\r\n      userRole = store.getters[\"auth/userData\"]?.role;\r\n    } catch {\r\n      return next(\"/login\");\r\n    }\r\n  }\r\n\r\n  // Si la ruta requiere un rol específico y el usuario no tiene un rol permitido\r\n  if (to.meta.role && !to.meta.role.includes(userRole)) {\r\n    return next(\"/\"); // Redirigir a la página de inicio si el rol no coincide\r\n  }\r\n\r\n  next(); // Permitir el acceso si no hay restricciones\r\n});\r\n\r\nexport default router;"],"mappings":"AAAA,SAASA,YAAY,EAAEC,gBAAgB,QAAQ,YAAY;AAC3D,OAAOC,KAAK,MAAM,SAAS;AAC3B,OAAOC,IAAI,MAAM,kBAAkB;AACnC,OAAOC,KAAK,MAAM,wBAAwB;AAC1C,OAAOC,QAAQ,MAAM,2BAA2B;AAChD,OAAOC,SAAS,MAAM,6BAA6B;AACnD,OAAOC,iBAAiB,MAAM,sCAAsC;AACpE,OAAOC,OAAO,MAAM,4BAA4B;AAChD,OAAOC,cAAc,MAAM,mCAAmC;AAE9D,MAAMC,MAAM,GAAG,CACb;EAAEC,IAAI,EAAE,GAAG;EAAEC,IAAI,EAAE,MAAM;EAAEC,SAAS,EAAEV;AAAK,CAAC,EAC5C;EAAEQ,IAAI,EAAE,QAAQ;EAAEC,IAAI,EAAE,OAAO;EAAEC,SAAS,EAAET;AAAM,CAAC,EACnD;EAAEO,IAAI,EAAE,WAAW;EAAEC,IAAI,EAAE,UAAU;EAAEC,SAAS,EAAER;AAAS,CAAC,EAC5D;EACEM,IAAI,EAAE,YAAY;EAClBC,IAAI,EAAE,WAAW;EACjBC,SAAS,EAAEP,SAAS;EACpBQ,IAAI,EAAE;IAAEC,YAAY,EAAE,IAAI;IAAEC,IAAI,EAAE,CAAC,OAAO,EAAE,YAAY;EAAE;AAC5D,CAAC,EACD;EACEL,IAAI,EAAE,kBAAkB;EACxBC,IAAI,EAAE,mBAAmB;EACzBC,SAAS,EAAEN,iBAAiB;EAC5BO,IAAI,EAAE;IAAEC,YAAY,EAAE,IAAI;IAAEC,IAAI,EAAE,CAAC,OAAO,EAAE,YAAY,EAAE,QAAQ;EAAE;AACtE,CAAC,EACD;EACEL,IAAI,EAAE,UAAU;EAChBC,IAAI,EAAE,SAAS;EACfC,SAAS,EAAEL,OAAO;EAClBM,IAAI,EAAE;IAAEC,YAAY,EAAE;EAAK;AAC7B,CAAC,EACD;EACEJ,IAAI,EAAE,kBAAkB;EACxBC,IAAI,EAAE,gBAAgB;EACtBC,SAAS,EAAEJ,cAAc;EACzBK,IAAI,EAAE;IAAEC,YAAY,EAAE,IAAI;IAAEC,IAAI,EAAE,CAAC,OAAO,EAAE,YAAY,EAAE,QAAQ;EAAE;AACtE,CAAC,EACD;EAAEL,IAAI,EAAE,kBAAkB;EAAEC,IAAI,EAAE,UAAU;EAAEK,QAAQ,EAAE;AAAI,CAAC,CAC9D;AAED,MAAMC,MAAM,GAAGlB,YAAY,CAAC;EAC1BmB,OAAO,EAAElB,gBAAgB,CAAC,CAAC;EAC3BS;AACF,CAAC,CAAC;;AAEF;AACAQ,MAAM,CAACE,UAAU,CAAC,OAAOC,EAAE,EAAEC,IAAI,EAAEC,IAAI,KAAK;EAC1C,MAAMC,eAAe,GAAGtB,KAAK,CAACuB,OAAO,CAAC,sBAAsB,CAAC;EAC7D,IAAIC,QAAQ,GAAGxB,KAAK,CAACuB,OAAO,CAAC,eAAe,CAAC,EAAET,IAAI;;EAEnD;EACA,IAAIK,EAAE,CAACP,IAAI,CAACC,YAAY,IAAI,CAACS,eAAe,EAAE;IAC5C,IAAI;MACF;MACA,MAAMtB,KAAK,CAACyB,QAAQ,CAAC,oBAAoB,CAAC;MAC1C,MAAMC,sBAAsB,GAAG1B,KAAK,CAACuB,OAAO,CAAC,sBAAsB,CAAC;MACpE,IAAI,CAACG,sBAAsB,EAAE;QAC3B,OAAOL,IAAI,CAAC,QAAQ,CAAC;MACvB;MACA;MACAG,QAAQ,GAAGxB,KAAK,CAACuB,OAAO,CAAC,eAAe,CAAC,EAAET,IAAI;IACjD,CAAC,CAAC,MAAM;MACN,OAAOO,IAAI,CAAC,QAAQ,CAAC;IACvB;EACF;;EAEA;EACA,IAAIF,EAAE,CAACP,IAAI,CAACE,IAAI,IAAI,CAACK,EAAE,CAACP,IAAI,CAACE,IAAI,CAACa,QAAQ,CAACH,QAAQ,CAAC,EAAE;IACpD,OAAOH,IAAI,CAAC,GAAG,CAAC,CAAC,CAAC;EACpB;EAEAA,IAAI,CAAC,CAAC,CAAC,CAAC;AACV,CAAC,CAAC;AAEF,eAAeL,MAAM","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}