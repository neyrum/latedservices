{"ast":null,"code":"import { toDisplayString as _toDisplayString, openBlock as _openBlock, createElementBlock as _createElementBlock, createCommentVNode as _createCommentVNode, createTextVNode as _createTextVNode, createElementVNode as _createElementVNode, renderList as _renderList, Fragment as _Fragment, normalizeClass as _normalizeClass } from \"vue\";\nconst _hoisted_1 = {\n  class: \"notifications\"\n};\nconst _hoisted_2 = {\n  key: 0,\n  class: \"badge\"\n};\nconst _hoisted_3 = {\n  key: 0,\n  class: \"notification-container\"\n};\nconst _hoisted_4 = [\"onClick\"];\nexport function render(_ctx, _cache, $props, $setup, $data, $options) {\n  return _openBlock(), _createElementBlock(\"div\", _hoisted_1, [_createElementVNode(\"button\", {\n    onClick: _cache[0] || (_cache[0] = (...args) => $options.toggleNotifications && $options.toggleNotifications(...args)),\n    class: \"notification-btn\"\n  }, [_cache[1] || (_cache[1] = _createTextVNode(\" ðŸ”” \")), $data.notifications.length > 0 ? (_openBlock(), _createElementBlock(\"span\", _hoisted_2, _toDisplayString($data.notifications.length), 1 /* TEXT */)) : _createCommentVNode(\"v-if\", true)]), $data.notificationsOpen ? (_openBlock(), _createElementBlock(\"div\", _hoisted_3, [(_openBlock(true), _createElementBlock(_Fragment, null, _renderList($data.notifications, (notification, index) => {\n    return _openBlock(), _createElementBlock(\"div\", {\n      key: index,\n      class: _normalizeClass([\"alert\", $options.alertClass(notification.type)]),\n      role: \"alert\"\n    }, [_createTextVNode(_toDisplayString(notification.message) + \" \", 1 /* TEXT */), _createElementVNode(\"button\", {\n      type: \"button\",\n      class: \"close\",\n      \"aria-label\": \"Close\",\n      onClick: $event => $options.removeNotification(index)\n    }, [...(_cache[2] || (_cache[2] = [_createElementVNode(\"span\", {\n      \"aria-hidden\": \"true\"\n    }, \"Ã—\", -1 /* HOISTED */)]))], 8 /* PROPS */, _hoisted_4)], 2 /* CLASS */);\n  }), 128 /* KEYED_FRAGMENT */))])) : _createCommentVNode(\"v-if\", true)]);\n}","map":{"version":3,"names":["class","key","_createElementBlock","_hoisted_1","_createElementVNode","onClick","_cache","args","$options","toggleNotifications","_createTextVNode","$data","notifications","length","_hoisted_2","_toDisplayString","_createCommentVNode","notificationsOpen","_hoisted_3","_Fragment","_renderList","notification","index","_normalizeClass","alertClass","type","role","message","$event","removeNotification","_hoisted_4"],"sources":["/Users/macbookpro/project/LatedServices/frontend/src/components/Notification.vue"],"sourcesContent":["<template>\n  <div class=\"notifications\">\n    <button @click=\"toggleNotifications\" class=\"notification-btn\">\n      ðŸ”” <span v-if=\"notifications.length > 0\" class=\"badge\">{{ notifications.length }}</span>\n    </button>\n    <div v-if=\"notificationsOpen\" class=\"notification-container\">\n      <div \n        v-for=\"(notification, index) in notifications\" \n        :key=\"index\" \n        class=\"alert\"\n        :class=\"alertClass(notification.type)\"\n        role=\"alert\"\n      >\n        {{ notification.message }}\n        <button type=\"button\" class=\"close\" aria-label=\"Close\" @click=\"removeNotification(index)\">\n          <span aria-hidden=\"true\">&times;</span>\n        </button>\n      </div>\n    </div>\n  </div>\n</template>\n\n<script>\nexport default {\n  name: 'Notifications',\n  data() {\n    return {\n      notificationsOpen: false,\n      notifications: [\n        { id: 1, type: \"success\", message: \"Tu servicio ha sido aprobado\" },\n        { id: 2, type: \"info\", message: \"Tienes una nueva respuesta en tu solicitud\" }\n      ]\n    };\n  },\n  methods: {\n    alertClass(type) {\n      return `alert-${type}`;\n    },\n    toggleNotifications() {\n      this.notificationsOpen = !this.notificationsOpen;\n    },\n    removeNotification(index) {\n      this.notifications.splice(index, 1);\n    }\n  }\n};\n</script>\n\n<style scoped>\n.notifications { position: relative; display: flex; align-items: center; gap: 10px; }\n.notification-btn { background: none; border: none; cursor: pointer; font-size: 20px; color: white; }\n.badge { background: red; color: white; border-radius: 50%; padding: 5px; font-size: 12px; }\n.notification-container { position: absolute; top: 40px; right: 0; width: 250px; background: white; border: 1px solid #ccc; padding: 10px; }\n</style>\n"],"mappings":";;EACOA,KAAK,EAAC;AAAe;;EAD5BC,GAAA;EAG+CD,KAAK,EAAC;;;EAHrDC,GAAA;EAKkCD,KAAK,EAAC;;mBALxC;;uBACEE,mBAAA,CAkBM,OAlBNC,UAkBM,GAjBJC,mBAAA,CAES;IAFAC,OAAK,EAAAC,MAAA,QAAAA,MAAA,UAAAC,IAAA,KAAEC,QAAA,CAAAC,mBAAA,IAAAD,QAAA,CAAAC,mBAAA,IAAAF,IAAA,CAAmB;IAAEP,KAAK,EAAC;gCAF/CU,gBAAA,CAEkE,MACzD,IAAYC,KAAA,CAAAC,aAAa,CAACC,MAAM,Q,cAAhCX,mBAAA,CAAqF,QAArFY,UAAqF,EAAAC,gBAAA,CAA9BJ,KAAA,CAAAC,aAAa,CAACC,MAAM,oBAHpFG,mBAAA,e,GAKeL,KAAA,CAAAM,iBAAiB,I,cAA5Bf,mBAAA,CAaM,OAbNgB,UAaM,I,kBAZJhB,mBAAA,CAWMiB,SAAA,QAjBZC,WAAA,CAOwCT,KAAA,CAAAC,aAAa,EAPrD,CAOgBS,YAAY,EAAEC,KAAK;yBAD7BpB,mBAAA,CAWM;MATHD,GAAG,EAAEqB,KAAK;MACXtB,KAAK,EATbuB,eAAA,EASc,OAAO,EACLf,QAAA,CAAAgB,UAAU,CAACH,YAAY,CAACI,IAAI;MACpCC,IAAI,EAAC;QAXbhB,gBAAA,CAAAK,gBAAA,CAaWM,YAAY,CAACM,OAAO,IAAG,GAC1B,iBAAAvB,mBAAA,CAES;MAFDqB,IAAI,EAAC,QAAQ;MAACzB,KAAK,EAAC,OAAO;MAAC,YAAU,EAAC,OAAO;MAAEK,OAAK,EAAAuB,MAAA,IAAEpB,QAAA,CAAAqB,kBAAkB,CAACP,KAAK;uCACrFlB,mBAAA,CAAuC;MAAjC,aAAW,EAAC;IAAM,GAAC,GAAO,oB,oBAf1C0B,UAAA,E;sCAAAd,mBAAA,e","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}