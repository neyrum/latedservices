{"ast":null,"code":"import { createRouter, createWebHistory } from \"vue-router\";\nimport store from \"@/store\";\n\n// Vistas principales\nimport Home from \"@/views/Home.vue\";\nimport Login from \"@/views/auth/Login.vue\";\nimport Register from \"@/views/auth/Register.vue\";\nimport Dashboard from \"@/views/admin/Dashboard.vue\";\nimport Profile from \"@/views/client/Profile.vue\";\nimport RequestService from \"@/views/client/RequestService.vue\";\nimport RequestHistory from \"@/views/client/RequestHistory.vue\";\n\n// Módulos dentro del Dashboard\nimport DashboardHome from \"@/views/admin/DashboardHome.vue\";\nimport ManageServices from \"@/views/admin/ManageServices.vue\";\nimport UsersManagement from \"@/views/admin/UsersManagement.vue\";\nimport AvailableServices from \"@/views/client/AvailableServices.vue\";\nconst routes = [{\n  path: \"/\",\n  name: \"Home\",\n  component: Home\n}, {\n  path: \"/login\",\n  name: \"Login\",\n  component: Login\n}, {\n  path: \"/register\",\n  name: \"Register\",\n  component: Register\n}, {\n  path: \"/dashboard\",\n  component: Dashboard,\n  meta: {\n    requiresAuth: true,\n    role: [\"admin\", \"superadmin\", \"user\", \"client\"]\n  },\n  children: [{\n    path: \"\",\n    name: \"DashboardHome\",\n    component: DashboardHome\n  }, {\n    path: \"manage-services\",\n    name: \"ManageServices\",\n    component: ManageServices\n  }, {\n    path: \"users\",\n    name: \"UsersManagement\",\n    component: UsersManagement\n  }]\n}, {\n  path: \"/client/services\",\n  name: \"AvailableServices\",\n  component: AvailableServices,\n  meta: {\n    requiresAuth: true,\n    role: [\"admin\", \"superadmin\", \"client\"]\n  }\n}, {\n  path: \"/profile\",\n  name: \"Profile\",\n  component: Profile,\n  meta: {\n    requiresAuth: true\n  }\n}, {\n  path: \"/request-service\",\n  name: \"RequestService\",\n  component: RequestService,\n  meta: {\n    requiresAuth: true,\n    role: [\"admin\", \"superadmin\", \"client\"]\n  }\n}, {\n  path: \"/request-history\",\n  name: \"RequestHistory\",\n  component: RequestHistory,\n  meta: {\n    requiresAuth: true,\n    role: [\"admin\", \"superadmin\", \"client\"]\n  }\n}, {\n  path: \"/:pathMatch(.*)*\",\n  name: \"NotFound\",\n  redirect: \"/\"\n}];\nconst router = createRouter({\n  history: createWebHistory(),\n  routes\n});\n\n// Middleware de protección de rutas\nrouter.beforeEach(async (to, from, next) => {\n  const isAuthenticated = store.getters[\"auth/isAuthenticated\"];\n  let userRole = store.getters[\"auth/userData\"]?.role;\n\n  // Si la ruta requiere autenticación y el usuario no está autenticado\n  if (to.meta.requiresAuth && !isAuthenticated) {\n    try {\n      await store.dispatch(\"auth/validateToken\");\n      const updatedIsAuthenticated = store.getters[\"auth/isAuthenticated\"];\n      if (!updatedIsAuthenticated) return next(\"/login\");\n      // Actualizar el rol del usuario después de validar el token\n      userRole = store.getters[\"auth/userData\"]?.role;\n    } catch {\n      return next(\"/login\");\n    }\n  }\n\n  // Si la ruta requiere un rol específico y el usuario no tiene un rol permitido\n  if (to.meta.role && !to.meta.role.includes(userRole)) {\n    return next(\"/\");\n  }\n  next();\n});\nexport default router;","map":{"version":3,"names":["createRouter","createWebHistory","store","Home","Login","Register","Dashboard","Profile","RequestService","RequestHistory","DashboardHome","ManageServices","UsersManagement","AvailableServices","routes","path","name","component","meta","requiresAuth","role","children","redirect","router","history","beforeEach","to","from","next","isAuthenticated","getters","userRole","dispatch","updatedIsAuthenticated","includes"],"sources":["/home/lated/LatedServices/frontend/src/router/index.js"],"sourcesContent":["import { createRouter, createWebHistory } from \"vue-router\";\r\nimport store from \"@/store\";\r\n\r\n// Vistas principales\r\nimport Home from \"@/views/Home.vue\";\r\nimport Login from \"@/views/auth/Login.vue\";\r\nimport Register from \"@/views/auth/Register.vue\";\r\nimport Dashboard from \"@/views/admin/Dashboard.vue\";\r\nimport Profile from \"@/views/client/Profile.vue\";\r\nimport RequestService from \"@/views/client/RequestService.vue\";\r\nimport RequestHistory from \"@/views/client/RequestHistory.vue\";\r\n\r\n// Módulos dentro del Dashboard\r\nimport DashboardHome from \"@/views/admin/DashboardHome.vue\";\r\nimport ManageServices from \"@/views/admin/ManageServices.vue\";\r\nimport UsersManagement from \"@/views/admin/UsersManagement.vue\";\r\nimport AvailableServices from \"@/views/client/AvailableServices.vue\";\r\n\r\nconst routes = [\r\n  { path: \"/\", name: \"Home\", component: Home },\r\n  { path: \"/login\", name: \"Login\", component: Login },\r\n  { path: \"/register\", name: \"Register\", component: Register },\r\n  {\r\n    path: \"/dashboard\",\r\n    component: Dashboard,\r\n    meta: { requiresAuth: true, role: [\"admin\", \"superadmin\", \"user\", \"client\"] },\r\n    children: [\r\n      { path: \"\", name: \"DashboardHome\", component: DashboardHome },\r\n      { path: \"manage-services\", name: \"ManageServices\", component: ManageServices },\r\n      { path: \"users\", name: \"UsersManagement\", component: UsersManagement },\r\n    ],\r\n  },\r\n  {\r\n    path: \"/client/services\",\r\n    name: \"AvailableServices\",\r\n    component: AvailableServices,\r\n    meta: { requiresAuth: true, role: [\"admin\", \"superadmin\", \"client\"] },\r\n  },\r\n  { path: \"/profile\", name: \"Profile\", component: Profile, meta: { requiresAuth: true } },\r\n  {\r\n    path: \"/request-service\",\r\n    name: \"RequestService\",\r\n    component: RequestService,\r\n    meta: { requiresAuth: true, role: [\"admin\", \"superadmin\", \"client\"] },\r\n  },\r\n  {\r\n    path: \"/request-history\",\r\n    name: \"RequestHistory\",\r\n    component: RequestHistory,\r\n    meta: { requiresAuth: true, role: [\"admin\", \"superadmin\", \"client\"] },\r\n  },\r\n  { path: \"/:pathMatch(.*)*\", name: \"NotFound\", redirect: \"/\" },\r\n];\r\n\r\nconst router = createRouter({\r\n  history: createWebHistory(),\r\n  routes,\r\n});\r\n\r\n// Middleware de protección de rutas\r\nrouter.beforeEach(async (to, from, next) => {\r\n  const isAuthenticated = store.getters[\"auth/isAuthenticated\"];\r\n  let userRole = store.getters[\"auth/userData\"]?.role;\r\n\r\n  // Si la ruta requiere autenticación y el usuario no está autenticado\r\n  if (to.meta.requiresAuth && !isAuthenticated) {\r\n    try {\r\n      await store.dispatch(\"auth/validateToken\");\r\n      const updatedIsAuthenticated = store.getters[\"auth/isAuthenticated\"];\r\n      if (!updatedIsAuthenticated) return next(\"/login\");\r\n      // Actualizar el rol del usuario después de validar el token\r\n      userRole = store.getters[\"auth/userData\"]?.role;\r\n    } catch {\r\n      return next(\"/login\");\r\n    }\r\n  }\r\n\r\n  // Si la ruta requiere un rol específico y el usuario no tiene un rol permitido\r\n  if (to.meta.role && !to.meta.role.includes(userRole)) {\r\n    return next(\"/\");\r\n  }\r\n\r\n  next();\r\n});\r\n\r\nexport default router;\r\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}