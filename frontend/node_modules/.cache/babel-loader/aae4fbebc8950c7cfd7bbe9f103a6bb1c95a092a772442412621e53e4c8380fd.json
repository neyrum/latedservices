{"ast":null,"code":"import { createRouter, createWebHistory } from \"vue-router\";\nimport store from \"@/store\";\nimport Home from \"@/views/Home.vue\";\nimport Login from \"@/views/auth/Login.vue\";\nimport Register from \"@/views/auth/Register.vue\";\nimport Dashboard from \"@/views/admin/Dashboard.vue\";\nimport AvailableServices from \"@/views/client/AvailableServices.vue\";\nimport Profile from \"@/views/client/Profile.vue\";\nimport RequestService from \"@/views/client/RequestService.vue\";\nimport ManageServices from \"@/views/admin/ManageServices.vue\";\nimport AddService from \"@/views/admin/AddService.vue\";\nimport ManageUsers from \"@/views/admin/ManageUsers.vue\";\nimport AddUser from \"@/views/admin/AddUser.vue\";\nconst routes = [{\n  path: \"/\",\n  name: \"Home\",\n  component: Home\n}, {\n  path: \"/login\",\n  name: \"Login\",\n  component: Login,\n  meta: {\n    requiresGuest: true\n  }\n}, {\n  path: \"/register\",\n  name: \"Register\",\n  component: Register,\n  meta: {\n    requiresGuest: true\n  }\n}, {\n  path: \"/dashboard\",\n  name: \"Dashboard\",\n  component: Dashboard,\n  meta: {\n    requiresAuth: true,\n    role: [\"admin\", \"superadmin\"]\n  },\n  children: [{\n    path: \"manage-services\",\n    name: \"ManageServices\",\n    component: ManageServices,\n    meta: {\n      requiresAuth: true,\n      role: [\"admin\", \"superadmin\"]\n    }\n  }, {\n    path: \"add-service\",\n    name: \"AddService\",\n    component: AddService,\n    meta: {\n      requiresAuth: true,\n      role: [\"admin\", \"superadmin\"]\n    }\n  }, {\n    path: \"manage-users\",\n    name: \"ManageUsers\",\n    component: ManageUsers,\n    meta: {\n      requiresAuth: true,\n      role: [\"superadmin\"]\n    }\n  }, {\n    path: \"add-user\",\n    name: \"AddUser\",\n    component: AddUser,\n    meta: {\n      requiresAuth: true,\n      role: [\"superadmin\"]\n    }\n  }]\n}, {\n  path: \"/client/services\",\n  name: \"AvailableServices\",\n  component: AvailableServices,\n  meta: {\n    requiresAuth: true,\n    role: [\"client\", \"admin\", \"superadmin\"]\n  }\n}, {\n  path: \"/profile\",\n  name: \"Profile\",\n  component: Profile,\n  meta: {\n    requiresAuth: true\n  }\n}, {\n  path: \"/request-service\",\n  name: \"RequestService\",\n  component: RequestService,\n  meta: {\n    requiresAuth: true,\n    role: [\"client\", \"admin\", \"superadmin\"]\n  }\n}, {\n  path: \"/:pathMatch(.*)*\",\n  name: \"NotFound\",\n  redirect: \"/\"\n}];\nconst router = createRouter({\n  history: createWebHistory(process.env.BASE_URL),\n  routes,\n  scrollBehavior(to, from, savedPosition) {\n    if (savedPosition) {\n      return savedPosition;\n    } else {\n      return {\n        top: 0\n      };\n    }\n  }\n});\nrouter.beforeEach(async (to, from, next) => {\n  const isAuthenticated = store.getters[\"auth/isAuthenticated\"];\n  const userRole = store.getters[\"auth/userData\"]?.role || 'guest';\n\n  // Redirigir usuarios autenticados que intentan acceder a rutas de invitado\n  if (to.meta.requiresGuest && isAuthenticated) {\n    return next(userRole === 'client' ? '/client/services' : '/dashboard');\n  }\n\n  // Verificar autenticación para rutas protegidas\n  if (to.meta.requiresAuth && !isAuthenticated) {\n    try {\n      await store.dispatch(\"auth/validateToken\");\n      if (!store.getters[\"auth/isAuthenticated\"]) {\n        return next(\"/login\");\n      }\n    } catch (error) {\n      return next(\"/login\");\n    }\n  }\n\n  // Verificar roles de usuario\n  if (to.meta.role && !to.meta.role.includes(userRole)) {\n    // Usuario no tiene permiso para esta ruta\n    return next(isAuthenticated ? userRole === 'client' ? '/client/services' : '/dashboard' : '/login');\n  }\n  next();\n});\nexport default router;","map":{"version":3,"names":["createRouter","createWebHistory","store","Home","Login","Register","Dashboard","AvailableServices","Profile","RequestService","ManageServices","AddService","ManageUsers","AddUser","routes","path","name","component","meta","requiresGuest","requiresAuth","role","children","redirect","router","history","process","env","BASE_URL","scrollBehavior","to","from","savedPosition","top","beforeEach","next","isAuthenticated","getters","userRole","dispatch","error","includes"],"sources":["/home/lated/LatedServices/frontend/src/router/index.js"],"sourcesContent":["import { createRouter, createWebHistory } from \"vue-router\";\r\nimport store from \"@/store\";\r\nimport Home from \"@/views/Home.vue\";\r\nimport Login from \"@/views/auth/Login.vue\";\r\nimport Register from \"@/views/auth/Register.vue\";\r\nimport Dashboard from \"@/views/admin/Dashboard.vue\";\r\nimport AvailableServices from \"@/views/client/AvailableServices.vue\";\r\nimport Profile from \"@/views/client/Profile.vue\";\r\nimport RequestService from \"@/views/client/RequestService.vue\";\r\nimport ManageServices from \"@/views/admin/ManageServices.vue\";\r\nimport AddService from \"@/views/admin/AddService.vue\";\r\nimport ManageUsers from \"@/views/admin/ManageUsers.vue\";\r\nimport AddUser from \"@/views/admin/AddUser.vue\";\r\n\r\nconst routes = [\r\n  { \r\n    path: \"/\", \r\n    name: \"Home\", \r\n    component: Home \r\n  },\r\n  { \r\n    path: \"/login\", \r\n    name: \"Login\", \r\n    component: Login,\r\n    meta: { requiresGuest: true } \r\n  },\r\n  { \r\n    path: \"/register\", \r\n    name: \"Register\", \r\n    component: Register,\r\n    meta: { requiresGuest: true } \r\n  },\r\n  {\r\n    path: \"/dashboard\",\r\n    name: \"Dashboard\",\r\n    component: Dashboard,\r\n    meta: { requiresAuth: true, role: [\"admin\", \"superadmin\"] },\r\n    children: [\r\n      {\r\n        path: \"manage-services\",\r\n        name: \"ManageServices\",\r\n        component: ManageServices,\r\n        meta: { requiresAuth: true, role: [\"admin\", \"superadmin\"] }\r\n      },\r\n      {\r\n        path: \"add-service\",\r\n        name: \"AddService\",\r\n        component: AddService,\r\n        meta: { requiresAuth: true, role: [\"admin\", \"superadmin\"] }\r\n      },\r\n      {\r\n        path: \"manage-users\",\r\n        name: \"ManageUsers\",\r\n        component: ManageUsers,\r\n        meta: { requiresAuth: true, role: [\"superadmin\"] }\r\n      },\r\n      {\r\n        path: \"add-user\",\r\n        name: \"AddUser\",\r\n        component: AddUser,\r\n        meta: { requiresAuth: true, role: [\"superadmin\"] }\r\n      }\r\n    ]\r\n  },\r\n  {\r\n    path: \"/client/services\",\r\n    name: \"AvailableServices\",\r\n    component: AvailableServices,\r\n    meta: { requiresAuth: true, role: [\"client\", \"admin\", \"superadmin\"] }\r\n  },\r\n  {\r\n    path: \"/profile\",\r\n    name: \"Profile\",\r\n    component: Profile,\r\n    meta: { requiresAuth: true }\r\n  },\r\n  {\r\n    path: \"/request-service\",\r\n    name: \"RequestService\",\r\n    component: RequestService,\r\n    meta: { requiresAuth: true, role: [\"client\", \"admin\", \"superadmin\"] }\r\n  },\r\n  { \r\n    path: \"/:pathMatch(.*)*\", \r\n    name: \"NotFound\", \r\n    redirect: \"/\" \r\n  }\r\n];\r\n\r\nconst router = createRouter({\r\n  history: createWebHistory(process.env.BASE_URL),\r\n  routes,\r\n  scrollBehavior(to, from, savedPosition) {\r\n    if (savedPosition) {\r\n      return savedPosition;\r\n    } else {\r\n      return { top: 0 };\r\n    }\r\n  }\r\n});\r\n\r\nrouter.beforeEach(async (to, from, next) => {\r\n  const isAuthenticated = store.getters[\"auth/isAuthenticated\"];\r\n  const userRole = store.getters[\"auth/userData\"]?.role || 'guest';\r\n\r\n  // Redirigir usuarios autenticados que intentan acceder a rutas de invitado\r\n  if (to.meta.requiresGuest && isAuthenticated) {\r\n    return next(userRole === 'client' ? '/client/services' : '/dashboard');\r\n  }\r\n\r\n  // Verificar autenticación para rutas protegidas\r\n  if (to.meta.requiresAuth && !isAuthenticated) {\r\n    try {\r\n      await store.dispatch(\"auth/validateToken\");\r\n      if (!store.getters[\"auth/isAuthenticated\"]) {\r\n        return next(\"/login\");\r\n      }\r\n    } catch (error) {\r\n      return next(\"/login\");\r\n    }\r\n  }\r\n\r\n  // Verificar roles de usuario\r\n  if (to.meta.role && !to.meta.role.includes(userRole)) {\r\n    // Usuario no tiene permiso para esta ruta\r\n    return next(isAuthenticated ? (userRole === 'client' ? '/client/services' : '/dashboard') : '/login');\r\n  }\r\n\r\n  next();\r\n});\r\n\r\nexport default router;"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}